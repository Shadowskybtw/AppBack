from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import logging
from config import settings

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class BotError(Exception):
    """Custom exception for bot operations"""
    pass


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    logger.info(f"Start command from user {user.id} in chat {chat_id}")
    
    if not settings.BOT_TOKEN:
        logger.error("Bot token not configured")
        await update.message.reply_text("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if not settings.WEBAPP_URL:
        logger.error("WebApp URL not configured")
        await update.message.reply_text("WebApp URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        # Call FastAPI endpoint to send WebApp button
        response = requests.post(
            f"{settings.BACKEND_URL}/send_webapp_button/{chat_id}",
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info(f"WebApp button sent successfully to chat {chat_id}")
            await update.message.reply_text("‚úÖ –ö–Ω–æ–ø–∫–∞ WebApp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            logger.error(f"Failed to send WebApp button: {response.status_code} - {response.text}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ WebApp. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except requests.RequestException as e:
        logger.error(f"Request error while sending WebApp button: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error in start command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    help_text = """
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WebApp
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

üì± **WebApp** - —ç—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞–º–∏ –∫–∞–ª—å—è–Ω–æ–≤.

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command"""
    try:
        # Check backend health
        response = requests.get(f"{settings.BACKEND_URL}/health", timeout=5)
        
        if response.status_code == 200:
            status_data = response.json()
            status_text = f"""
‚úÖ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

üñ•Ô∏è **Backend**: –†–∞–±–æ—Ç–∞–µ—Ç
‚è∞ **–í—Ä–µ–º—è**: {status_data.get('timestamp', 'N/A')}
ü§ñ **–ë–æ—Ç**: –†–∞–±–æ—Ç–∞–µ—Ç
            """
        else:
            status_text = """
‚ùå **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

üñ•Ô∏è **Backend**: –û—à–∏–±–∫–∞
ü§ñ **–ë–æ—Ç**: –†–∞–±–æ—Ç–∞–µ—Ç
            """
            
    except Exception as e:
        logger.error(f"Error checking status: {e}")
        status_text = """
‚ùå **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

üñ•Ô∏è **Backend**: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
ü§ñ **–ë–æ—Ç**: –†–∞–±–æ—Ç–∞–µ—Ç
        """
    
    await update.message.reply_text(status_text, parse_mode='Markdown')


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors in bot updates"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def run_bot():
    """Initialize and run the bot"""
    if not settings.BOT_TOKEN:
        logger.error("Bot token not configured. Cannot start bot.")
        return
    
    try:
        # Build bot application
        app = ApplicationBuilder().token(settings.BOT_TOKEN).build()
        
        # Add command handlers
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status_command))
        
        # Add error handler
        app.add_error_handler(error_handler)
        
        logger.info("Bot started successfully")
        logger.info(f"Bot username: @{app.bot.username}")
        
        # Start polling
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise BotError(f"Bot startup failed: {e}")


if __name__ == "__main__":
    try:
        run_bot()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
        exit(1)